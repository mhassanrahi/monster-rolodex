{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","handleChange","type","placeholder","onChange","App","fetchUser","a","fetch","response","json","resJSON","setState","console","log","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAGaA,G,kBAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,2CAAsCF,EAAQG,IAAMC,IAAI,YAChE,gCAAMJ,EAAQK,MACd,2BAAIL,EAAQM,UCHXC,EAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACI,yBAAKP,UAAU,aAEXO,EAASC,KAAI,SAAAT,GACT,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAQG,GAAIH,QAASA,SCP1CW,G,MAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACI,2BACIC,KAAK,SACLZ,UAAU,SACVa,YAAY,kBACZC,SAAUH,MC2CPI,E,kDA3Cb,aAAgB,IAAD,8BACb,gBAOFC,UARe,sBAQH,8BAAAC,EAAA,+EAEeC,MAAM,8CAFrB,cAEFC,EAFE,gBAGcA,EAASC,OAHvB,OAGFC,EAHE,OAIR,EAAKC,SAAS,CAACf,SAAUc,IAJjB,kDAMRE,QAAQC,IAAR,MANQ,0DARG,EAsBfb,aAAe,SAAAc,GACb,EAAKH,SAAS,CAACI,YAAaD,EAAEE,OAAOC,SArBrC,EAAKC,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IAJF,E,0KAmBbI,KAAKd,Y,qIAQG,IAAD,EACyBc,KAAKD,MAA9BtB,EADA,EACAA,SAAUmB,EADV,EACUA,YACXK,EAAmBxB,EAASyB,QAChC,SAAAjC,GAAO,OAAIA,EAAQK,KAAK6B,cAAcC,SAASR,EAAYS,wBAE/D,OACE,yBAAKnC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWW,aAAcmB,KAAKnB,eAC9B,kBAAC,EAAD,CAAUJ,SAAUwB,S,GArCRK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.35cd19ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = ({monster}) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={`https://picsum.photos/180?random=${monster.id}`} alt='Monster'/>\r\n            <h3> {monster.name}</h3>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = ({monsters}) => {\r\n    return (\r\n        <div className='card-list'>\r\n           {\r\n            monsters.map(monster => {\r\n                return <Card key={monster.id} monster={monster} />;\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n// export default CardList;","import React from 'react';\r\n\r\nimport './search-box.style.css'\r\nexport const SearchBox = ({ handleChange }) => {\r\n    return (\r\n        <input\r\n            type='search'\r\n            className='search'\r\n            placeholder='Search Monsters'\r\n            onChange={handleChange}                \r\n        />\r\n    );\r\n}","import React, {Component} from 'react';\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\n\n\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  \n  fetchUser = async () => {\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const resJSON = await response.json();\n      this.setState({monsters: resJSON})\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  async componentDidMount() {\n    this.fetchUser();\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n  return (\n    <div className='App'>\n      <h1>Monsters Rolodex</h1>\n      <SearchBox handleChange={this.handleChange}/>\n      <CardList monsters={filteredMonsters} />\n   </div>\n  );\n};\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}